// Generated by CoffeeScript 1.7.1
var ARIA_VALUEMAX, ASSET_TYPE, FOLDER_BY_TYPE, JOB_LOCK, MAX_OVERTIME, async, config, deblocking, fs, isLock, locking, path, selectProjectPath, shell, signUtil, startDown, wget, _fetchAssets, _initProgressBar, _loadAssetList, _upProgressBar;

config = require('./config');

fs = require('fs');

signUtil = require("./sign_util");

wget = require('wgetjs');

async = require("async");

shell = require("shelljs");

path = require("path");

JOB_LOCK = 0;

MAX_OVERTIME = 60 * 60 * 1000;

ASSET_TYPE = {
  desktop: 'png_jpg',
  ios: 'pvrct_1_4',
  android: 'etc1_pkm'
};

FOLDER_BY_TYPE = {
  desktop: 'gama',
  ios: 'gama_ios',
  android: 'gama_android'
};

$(document).ready(function() {
  var name;
  name = config.getProjectName();
  if (!((name != null) && name.length > 0)) {
    window.location.href = "./index.html";
    return;
  }
  return $('#project_name').text(config.getProjectName());
});

selectProjectPath = function() {
  var projectPath;
  projectPath = $("#select_file").val();
  if ((projectPath != null) && projectPath.length > 0) {
    return $("#project_path").val(projectPath);
  }
};

startDown = function(type, group) {
  var ARIA_VALUEMAX, isDir, projectPath;
  projectPath = $('#project_path').val().trim();
  if (!((projectPath != null) && projectPath.length > 0)) {
    bootbox.alert('下载之前，请选择你本地的项目目录');
    return;
  }
  isDir = fs.existsSync(projectPath);
  if (!isDir) {
    bootbox.alert('选择的本地目录不存在，请重新选择');
    return;
  }
  if (isLock()) {
    bootbox.alert('当前有下载任务正在进行，请等待。');
    return;
  }
  locking();
  ARIA_VALUEMAX = 0;
  return _loadAssetList(ASSET_TYPE[type] || 'all', function(err, results) {
    var ids;
    if (err != null) {
      bootbox.alert("error:" + err);
      return;
    }
    if (!(Array.isArray(results) && results.length > 0)) {
      bootbox.alert("还没有相关素材");
      return;
    }
    ids = [];
    switch (group) {
      case "all":
        ids = results;
        break;
      case "csx":
        results.map(function(id) {
          if (id.indexOf('.csx') >= 0) {
            return ids.push(id);
          }
        });
        break;
    }
    _initProgressBar(type, ids.length);
    return _fetchAssets(projectPath, type, group, ids);
  });
};

locking = function() {
  return JOB_LOCK = Date.now() + MAX_OVERTIME;
};

deblocking = function() {
  return JOB_LOCK = 0;
};

isLock = function() {
  return JOB_LOCK > Date.now();
};

ARIA_VALUEMAX = 0;

_initProgressBar = function(type, sum) {
  ARIA_VALUEMAX = sum;
  $("#" + type + "_progressbar").attr('aria-valuemax', sum);
  $("#" + type + "_progressbar").attr('aria-valuenow', 0);
  $("#" + type + "_progressbar").attr('aria-valuemin', 0);
  $("#" + type + "_progressbar").attr('style', "width: 0%;");
  return $("#" + type + "_progressbar").text("0/" + ARIA_VALUEMAX);
};

_upProgressBar = function(type, now) {
  var plan;
  plan = Math.ceil(now / ARIA_VALUEMAX * 100);
  $("#" + type + "_progressbar").attr('aria-valuenow', now);
  $("#" + type + "_progressbar").attr('style', "width: " + plan + "%;");
  return $("#" + type + "_progressbar").text("" + now + "/" + ARIA_VALUEMAX);
};

_fetchAssets = function(projectPath, type, group, ids, callback) {
  var folder, i, sum_ids;
  folder = FOLDER_BY_TYPE[type];
  if (!folder) {
    bootbox.alert('不知道对应的素材目录。');
    return;
  }
  folder = path.join(projectPath, folder);
  shell.mkdir('-p', folder);
  if (group === "csx") {
    shell.rm('-rf', "" + folder + "/*.csx");
  } else {
    shell.rm('-rf', "" + folder + "/*");
  }
  sum_ids = ids.length;
  i = 0;
  return async.eachSeries(ids, function(id, next) {
    var projectId, serial, signData, uri;
    projectId = config.getProjectId();
    serial = config.getProjectSerial();
    uri = "" + (config.loadWebUrlRoot()) + "/projects/" + projectId + "/assets/" + id;
    signData = signUtil.sign("GET", uri, projectId, serial);
    return wget({
      url: "" + uri + "?timestamp=" + (encodeURIComponent(signData.timestamp)) + "&signature=" + (encodeURIComponent(signData.signature)),
      dest: "" + folder + "/"
    }, function(err, data) {
      if (err != null) {
        return next(err);
      }
      _upProgressBar(type, ++i);
      next();
    });
  }, function(err) {
    deblocking();
    if (err != null) {
      bootbox.alert("error:" + err);
      return;
    }
    return bootbox.alert("下载完成");
  });
};

_loadAssetList = function(type, callback) {
  var id, serial, signData, uri;
  id = config.getProjectId();
  serial = config.getProjectSerial();
  uri = "" + (config.loadWebUrlRoot()) + "/projects/" + id + "/assets_list/" + type;
  signData = signUtil.sign("GET", uri, id, serial);
  return $.ajax(uri, {
    type: 'GET',
    dataType: 'json',
    data: signData,
    success: function(result) {
      if (result.success) {
        return callback(null, result.data);
      } else {
        return callback(result.msg);
      }
    },
    error: function(jqXHR, textStatus, err) {
      return callback("error:(" + textStatus + "): " + err);
    }
  });
};

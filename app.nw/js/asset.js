// Generated by CoffeeScript 1.7.1
var ASSET_TYPE, config, fs, mkdirp, selectProjectPath, signUtil, startDown, _loadAssetList;

config = require('./config');

fs = require('fs');

mkdirp = require('mkdirp');

signUtil = require("./sign_util");

ASSET_TYPE = {
  desktop: 'png_jpg',
  ios: 'pvrct_1_4',
  android: 'etc1_pkm'
};

$(document).ready(function() {
  var name;
  name = config.getProjectName();
  if (!((name != null) && name.length > 0)) {
    window.location.href = "./index.html";
    return;
  }
  return $('#project_name').text(config.getProjectName());
});

selectProjectPath = function() {
  var projectPath;
  projectPath = $("#select_file").val();
  if ((projectPath != null) && projectPath.length > 0) {
    return $("#project_path").val(projectPath);
  }
};

startDown = function(type, group) {
  var isDir, projectPath;
  projectPath = $('#project_path').val().trim();
  if (!((projectPath != null) && projectPath.length > 0)) {
    bootbox.alert('下载之前，请选择你本地的项目目录');
    return;
  }
  isDir = fs.existsSync(projectPath);
  if (!isDir) {
    bootbox.alert('选择的本地目录不存在，请重新选择');
    returnn;
  }
  return _loadAssetList(ASSET_TYPE[type] || 'all', function(err, results) {
    var ids;
    if (err != null) {
      bootbox.alert("error:" + err);
      return;
    }
    if (!(Array.isArray(results) && results.length > 0)) {
      bootbox.alert("还没有相关素材");
      return;
    }
    ids = [];
    switch (group) {
      case "all":
        ids = results;
        break;
      case "csx":
        results.map(function(id) {
          if (id.indexOf('.csx') >= 0) {
            return ids.push(id);
          }
        });
        break;
    }
    return alert("请等待接口实现!");
  });
};

_loadAssetList = function(type, callback) {
  var id, serial, signData, uri;
  id = config.getProjectId();
  serial = config.getProjectSerial();
  uri = "" + (config.loadWebUrlRoot()) + "/projects/" + id + "/assets_list/" + type;
  signData = signUtil.sign("GET", uri, id, serial);
  return $.ajax(uri, {
    type: 'GET',
    dataType: 'json',
    data: signData,
    success: function(result) {
      if (result.success) {
        return callback(null, result.data);
      } else {
        return callback(result.msg);
      }
    },
    error: function(jqXHR, textStatus, err) {
      return callback("error:(" + textStatus + "): " + err);
    }
  });
};
